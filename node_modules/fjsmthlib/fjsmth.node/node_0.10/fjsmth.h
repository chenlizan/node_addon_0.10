#ifndef FJSMTH_H
#define FJSMTH_H

#include <node.h>
#include <node_buffer.h>

namespace clz {

    class Fjsmth : public node::ObjectWrap {
    private:
        static void workerFunc(uv_work_t *req);
        static void afterWorkFunc(uv_work_t *req, int status);
        static void GenCallbkFn(char *pDevid, int iMsgCode, char *pData, int iDataLen, void *pUserData);
        static v8::Handle < v8::Value > New(const v8::Arguments &args);
        static v8::Handle < v8::Value > startLibWork(const v8::Arguments &args);
        static v8::Handle < v8::Value > stopLibWork(const v8::Arguments &args);
        static v8::Handle < v8::Value > setAppTcpCallbkFn(const v8::Arguments &args);
        static v8::Handle < v8::Value > getServerNetStatus(const v8::Arguments &args);
        static v8::Handle < v8::Value > addUserDevice(const v8::Arguments &args);
        static v8::Handle < v8::Value > readDevStateData(const v8::Arguments &args);
        static v8::Handle < v8::Value > readDevSingleStateData(const v8::Arguments &args);
        static v8::Handle < v8::Value > writeDevSingleStateSData(const v8::Arguments &args);
        static v8::Handle < v8::Value > writeDevSingleStateIData(const v8::Arguments &args);
    public:
        Fjsmth();
        ~Fjsmth();
        static void Initialize(v8::Handle < v8::Object > target);
    };
}
#endif

extern "C" {

    static void init(v8::Handle < v8::Object > target) {
        clz::Fjsmth::Initialize(target);
    }
}

NODE_MODULE(Fjsmth, init)