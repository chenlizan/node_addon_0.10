
#ifdef	WIN32
#define FJSMTHLIB_API __declspec(dllexport)
#else
#define FJSMTHLIB_API
#define __stdcall __attribute__((stdcall))
#endif

#ifdef __cplusplus
extern "C" {
#endif

/***********************************************************************************
                                   对网关接口
************************************************************************************/
//-------------------------------------通讯层------------------------------------
#define	TCPMSG_CONNECTED			1		//TCP连接建立
#define	TCPMSG_DISCONNECTED			2		//TCP连接断开
#define	TCPMSG_DATA				3		//TCP数据到达

//通讯层UDP回调:pIpAddr:对方IP地址; iPort:对方发送端口; pData:UDP数据; iDataLen:UDP数据长度; pUserData:用户数据;
typedef void (__stdcall *GwComUdpCallbkFn)(char *pIpAddr,unsigned short iPort,char *pData,int iDataLen,void *pUserData);
//通讯层TCP回调:pIpAddr:对方IP地址; iPort:对方发送端口; iTcpMsgType:TCP消息类型; pData:TCP数据; iDataLen:TCP数据长度; pUserData:用户数据;
typedef void (__stdcall *GwComTcpCallbkFn)(char *pIpAddr,unsigned short iPort,int iTcpMsgType,char *pData,int iDataLen,void *pUserData);

FJSMTHLIB_API void   __stdcall SetGwComUdpBroadcastPort(unsigned short iPort);								//设置本地UDP广播和监听的端口
FJSMTHLIB_API void   __stdcall SetGwComUdpCallbkFn(GwComUdpCallbkFn pFn,void *pUserData);					//设置通讯层UDP回调函数
FJSMTHLIB_API int    __stdcall GwComUdpBroadcastData(char *pData,int iLen);									//UDP广播数据
FJSMTHLIB_API void   __stdcall SetGwComTcpCallbkFn(GwComTcpCallbkFn pFn,void *pUserData);					//设置通讯层对网关TCP回调函数
FJSMTHLIB_API int    __stdcall GwComTcpSendData(char *pIpAddr,unsigned short iPort,char *pData,int iLen);	//通讯层对指定网关发送TCP数据

FJSMTHLIB_API int    __stdcall ComAddUserDevice(char *pIpAddr,unsigned short iPort);		//添加用户设备
FJSMTHLIB_API void   __stdcall ComDelUserDevice(char *pIpAddr,unsigned short iPort);		//删除用户设备
FJSMTHLIB_API void   __stdcall ComDelAllUserDevice();										//删除所有用户设备
FJSMTHLIB_API bool   __stdcall ComGetDevNetStatus(char *pIpAddr,unsigned short iPort);		//获取设备本地连接状态

//-------------------------------------应用层-------------------------------------
#define	CBMSG_REQUEST			0x00000001		//请求消息
#define	CBMSG_INDICATION		0x00000002		//指示消息
#define	CBMSG_RESPOND			0x00000083		//应答消息

//上层回调函数: pDevid:数据的直接来源设备ID; iMsgCode:消息类型; pData: 消息数据(json格式); iDataLen:消息数据字节数; pUserData:用户数据;
typedef void (__stdcall *GenCallbackFn)(char *pDevid,int iMsgCode,char *pData,int iDataLen,void *pUserData);

FJSMTHLIB_API void   __stdcall SetAppTcpCallbkFn(GenCallbackFn pFn,void *pUserData);	//设置应用层回调函数
FJSMTHLIB_API void   __stdcall SerchDeviceEnable(bool bEnable,int iSerchTm);			//设置是否允许广播搜索设备
FJSMTHLIB_API void   __stdcall SetWifiConnected(bool bConn);							//设置是否WIFI已连接
FJSMTHLIB_API void   __stdcall SetHeartTime(int iLocTm,int iFarTm);						//设置心跳时间
FJSMTHLIB_API void   __stdcall SetLocalId(char *pLocId);								//设置本地设备ID

FJSMTHLIB_API int    __stdcall AddUserDevice(char *pDevId);								//添加用户设备
FJSMTHLIB_API void   __stdcall DelUserDevice(char *pDevId);								//删除用户设备
FJSMTHLIB_API void   __stdcall DelAllUserDevice();										//删除所有用户设备
FJSMTHLIB_API bool   __stdcall GetDevLocNetStatus(char *pDevId);						//获取设备本地连接状态
FJSMTHLIB_API bool   __stdcall GetDevFarNetStatus(char *pDevId);						//获取设备远程连接状态

FJSMTHLIB_API int    __stdcall GenOperDevice(char *pDevId,int iMsgType,unsigned char iCmd,char *pParam,int iPmLen);		//通用设备操作(2014-11-20)
FJSMTHLIB_API int    __stdcall RestoreDevSettings(char *pDevId);														//将设备恢复出厂设置
FJSMTHLIB_API int    __stdcall ReadDevFirmwareCfg(char *pDevId);														//读取设备固件配置
FJSMTHLIB_API int    __stdcall WriteDevFirmwareCfg(char *pDevId,char *pDataSet,int iLen);								//写入设备固件配置
FJSMTHLIB_API int    __stdcall ReadDevPlotData(char *pDevId,long iLastUpdataTm,int PlotId[],int PlotNum);				//读取设备策略数据(2014-10-28)
FJSMTHLIB_API int    __stdcall WriteDevPlotData(char *pDevId,unsigned char *pPlotData,int iDataLen);					//写入设备策略数据(2014-10-28)
FJSMTHLIB_API int    __stdcall ReadDevStateData(char *pDevId,char *pParamBuff,int iPmLen);								//读取设备状态数据
FJSMTHLIB_API int    __stdcall WriteDevStateData(char *pDevId,char *pParambuff,int iPmLen);								//写入设备状态数据
FJSMTHLIB_API int    __stdcall ReadDevMultStateData(char *pDevId,int DataCode[],int iDataNum);							//读取设备多个状态数据
FJSMTHLIB_API int    __stdcall WriteDevMultStateData(char *pDevId,int DataCode[],char *DataVal[],int iDataNum);			//写入设备多个状态数据
FJSMTHLIB_API int    __stdcall ReadDevSingleStateData(char *pDevId,int iDataCode);										//读取设备一个状态数据
FJSMTHLIB_API int    __stdcall WriteDevSingleStateSData(char *pDevId,int iDataCode,char *pDataVal);						//写入设备一个状态字符串数据
FJSMTHLIB_API int    __stdcall WriteDevSingleStateIData(char *pDevId,int iDataCode,int iDataVal);						//写入设备一个状态整型数据
FJSMTHLIB_API int    __stdcall WriteDevSingleStateIdxSData(char *pDevId,int iDataCode,int iDataIdx,char *pDataVal);		//写入设备一个指定索引的状态字符串数据(2014-11-13)
FJSMTHLIB_API int    __stdcall WriteDevSingleStateIdxIData(char *pDevId,int iDataCode,int iDataIdx,int   iDataVal);		//写入设备一个指定索引的状态整型数据(2014-11-13)
FJSMTHLIB_API int    __stdcall SwitchDevice(char *pDevId,int iSwitch);													//控制一个开关开或关

FJSMTHLIB_API char * __stdcall OtaGetBinInfor(int *pFileLen);				//获得自身准备的OTA文件版本信息
FJSMTHLIB_API int    __stdcall OtaDevStart(char *pDevId);					//对某设备开始OTA升级(同时只能对一个设备开始OTA)
FJSMTHLIB_API int    __stdcall OtaDevStop();								//停止当前设备的OTA升级
FJSMTHLIB_API int    __stdcall OtaGetProgress();							//获得当前升级百分比

FJSMTHLIB_API void   __stdcall SetEasyConfig(char *pWifiName,char *pPasswd);//设置EASYLINK参数
FJSMTHLIB_API int    __stdcall StartEasylink();								//开始EASYLINK
FJSMTHLIB_API int    __stdcall StopEasylink();								//停止EASYLINK

FJSMTHLIB_API char * __stdcall GetDataProName(int iCode);					//获得数据属性名称
FJSMTHLIB_API int    __stdcall GetDataProCode(char *pName);					//获得数据属性码值
FJSMTHLIB_API char   __stdcall GetDataProType(int iCode,char *pName);		//获得数据属性数据类型
FJSMTHLIB_API int    __stdcall GetDataProSize(int iCode,char *pName);		//获得数据属性所占字节
FJSMTHLIB_API char * __stdcall GetDataProCnName(int iCode,char *pName);		//获得数据中文名称
FJSMTHLIB_API int    __stdcall GetDataProExpand(int iCode,char *pName);		//获得数据扩大倍数
FJSMTHLIB_API char * __stdcall GetDataProUnit(int iCode,char *pName);		//获得数据单位描述
FJSMTHLIB_API char * __stdcall GetDevEnName(int iCode);						//获得设备英文名称(2014-11-19)
FJSMTHLIB_API char * __stdcall GetDevCnName(int iCode);						//获得设备中文名称(2014-11-19)
FJSMTHLIB_API int    __stdcall GetDevTypeCode(char *pEnName);				//获得设备类型编码(2014-11-19)
/***********************************************************************************
                                   对云端接口
************************************************************************************/
//------------------------------------公用接口-----------------------------------
FJSMTHLIB_API void   __stdcall SetCldServerAddr(char *pServAddr,unsigned short iPort);		//设置云地址
FJSMTHLIB_API bool   __stdcall GetServerNetStatus();										//获取服务器连接状态
FJSMTHLIB_API void   __stdcall RefreshServerConn();											//刷新与服务器的连接(2014-12-16)
//-------------------------------------通讯层------------------------------------
//通讯层TCP回调:iTcpMsgType:TCP消息类型; pData:TCP数据; iDataLen:TCP数据长度; pUserData:用户数据;
typedef void (__stdcall *CldComTcpCallbkFn)(int iTcpMsgType,char *pData,int iDataLen,void *pUserData);

FJSMTHLIB_API void   __stdcall SetCldComTcpCallbkFn(CldComTcpCallbkFn pFn,void *pUserData);	//设置通讯层对云TCP回调函数
FJSMTHLIB_API int    __stdcall CldComTcpSendData(char *pData,int iLen);						//通讯层对指定网关发送TCP数据

//-------------------------------------应用层-------------------------------------
FJSMTHLIB_API int    __stdcall SubmitTmnToken(char *pAppKey,char *pToken,char *pOsVersion);	//提交令牌
FJSMTHLIB_API int    __stdcall GetLogonSucc();												//获取是否登录成功
FJSMTHLIB_API void   __stdcall SetLogonOut();												//注销

/***********************************************************************************
                                    全局公用接口
************************************************************************************/
FJSMTHLIB_API int    __stdcall StartLibWork();	//开始库工作
FJSMTHLIB_API int    __stdcall StopLibWork();	//停止库工作

#ifdef __cplusplus
}
#endif