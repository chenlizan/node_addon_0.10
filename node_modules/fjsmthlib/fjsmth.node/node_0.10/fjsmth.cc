#include <stdint.h>
#include <string.h>
#include <node.h>
#include <v8.h>
#include <string>
#include "fjsmth.h"
#include "fjsmthlib.h"

using namespace std;
using namespace v8;
using namespace node;
using namespace clz;

struct reqData {
    v8::Persistent<v8::Function> callback;
    std::string devid;
    int msgcode;
    std::string data;
    int datalen;
};

static Persistent<Function>* cb = NULL;

void Fjsmth::workerFunc(uv_work_t *req) {
}

void Fjsmth::afterWorkFunc(uv_work_t *req, int status) {
    reqData* request = static_cast<reqData*> (req->data);
    Local<Value> argv[4];
    argv[0] = String::New(request->devid.c_str());
    argv[1] = Int32::New(request->msgcode);
    argv[2] = String::New(request->data.c_str());
    argv[3] = Int32::New(request->datalen);

    TryCatch try_catch;
    (*request->callback)->Call(v8::Context::GetCurrent()->Global(), sizeof (argv) / sizeof (argv[0]), argv);
    if (try_catch.HasCaught()) {
        FatalException(try_catch);
    };
    //    request->callback.Dispose();
    delete request;
    delete req;
}

void Fjsmth::GenCallbkFn(char *pDevid, int iMsgCode, char *pData, int iDataLen, void *pUserData) {
    reqData* request = new reqData();
    request->devid = pDevid;
    request->msgcode = iMsgCode;
    request->data = pData;
    request->datalen = iDataLen;
    request->callback = *cb;
    uv_work_t* req = new uv_work_t();
    req->data = request;
    uv_queue_work(uv_default_loop(), req, workerFunc, afterWorkFunc);
}

Fjsmth::Fjsmth() {
}

Fjsmth::~Fjsmth() {
}

void Fjsmth::Initialize(Handle < Object > target) {
    HandleScope scope;

    Local < FunctionTemplate > constructor_template = FunctionTemplate::New(
            New);
    constructor_template->SetClassName(String::NewSymbol("Fjsmth_clz"));
    constructor_template->InstanceTemplate()->SetInternalFieldCount(1);

    NODE_SET_PROTOTYPE_METHOD(constructor_template, "StartLibWork", startLibWork);
    NODE_SET_PROTOTYPE_METHOD(constructor_template, "StopLibWork", stopLibWork);
    NODE_SET_PROTOTYPE_METHOD(constructor_template, "SetAppTcpCallbkFn", setAppTcpCallbkFn);
    NODE_SET_PROTOTYPE_METHOD(constructor_template, "GetServerNetStatus", getServerNetStatus);
    NODE_SET_PROTOTYPE_METHOD(constructor_template, "AddUserDevice", addUserDevice);
    NODE_SET_PROTOTYPE_METHOD(constructor_template, "ReadDevStateData", readDevStateData);
    NODE_SET_PROTOTYPE_METHOD(constructor_template, "ReadDevSingleStateData", readDevSingleStateData);
    NODE_SET_PROTOTYPE_METHOD(constructor_template, "WriteDevSingleStateSData", writeDevSingleStateSData);
    NODE_SET_PROTOTYPE_METHOD(constructor_template, "WriteDevSingleStateIData", writeDevSingleStateIData);

    target->Set(String::NewSymbol("Fjsmth_clz"),
            constructor_template->GetFunction());
}

Handle < Value > Fjsmth::New(const Arguments &args) {
    HandleScope scope;
    Fjsmth* fj = new Fjsmth();
    fj->Wrap(args.This());
    return args.This();
}

Handle < Value > Fjsmth::startLibWork(const Arguments &args) {
    HandleScope scope;
    Local < Object > arg = args[0]->ToObject();
    String::AsciiValue _servAddr(arg->Get(String::NewSymbol("ServAddr"))->ToString());
    int32_t _port = arg->Get(String::NewSymbol("Port"))->ToInt32()->Value();
    SetAppTcpCallbkFn((GenCallbackFn) GenCallbkFn, NULL);
    SetCldServerAddr(*_servAddr, _port);
    SetLocalId("0000015623078770");
    int ret = StartLibWork();
    return scope.Close(Int32::New(ret));
}

Handle < Value > Fjsmth::stopLibWork(const Arguments &args) {
    HandleScope scope;
    int ret = StopLibWork();
    return scope.Close(Int32::New(ret));
}

Handle < Value > Fjsmth::setAppTcpCallbkFn(const Arguments& args) {
    HandleScope scope;
    if (!args[0]->IsFunction()) {
        return ThrowException(Exception::TypeError(String::New("Wrong arguments")));
    }
    cb = cb_persist(args[0]);
    return scope.Close(Undefined());
}

Handle < Value > Fjsmth::getServerNetStatus(const Arguments& args) {
    HandleScope scope;
    if (GetServerNetStatus()) {
        return scope.Close(Boolean::New(true));
    } else {
        return scope.Close(Boolean::New(false));
    }
}

Handle < Value > Fjsmth::addUserDevice(const Arguments& args) {
    HandleScope scope;
    if (!args[0]->IsObject()) {
        return ThrowException(Exception::TypeError(String::New("Wrong arguments")));
    }
    Local < Object > arg = args[0]->ToObject();
    String::AsciiValue _devId(arg->Get(String::NewSymbol("DevId"))->ToString());
    int ret = AddUserDevice(*_devId);
    return scope.Close(Int32::New(ret));
}

Handle < Value > Fjsmth::readDevStateData(const Arguments& args) {
    HandleScope scope;
    int ret;
    char sParam[128];
    if (!args[0]->IsString() && !args[1]->IsArray()) {
        return ThrowException(Exception::TypeError(String::New("Wrong arguments")));
    }
    Local < Object > arg = args[0]->ToObject();
    String::AsciiValue _devId(args[0]->ToString());
    Local<Array> _paramBuff = Local<Array>::Cast(args[1]);
    if (args[1]->IsArray() && _paramBuff->Length() != 0) {
        uint32_t i;
        for (i = 0; i < _paramBuff->Length() && i < 64; i++) {
            *(unsigned short *) (sParam + i * 2) = (unsigned short) _paramBuff->Get(i)->ToUint32()->Value();
        }
        ret = ReadDevStateData(*_devId, sParam, i * 2);
    } else {
        ret = ReadDevStateData(*_devId, 0, 0);
    }
    return scope.Close(Int32::New(ret));
}

Handle < Value > Fjsmth::readDevSingleStateData(const Arguments& args) {
    HandleScope scope;
    if (!args[0]->IsObject()) {
        return ThrowException(Exception::TypeError(String::New("Wrong arguments")));
    }
    Local < Object > arg = args[0]->ToObject();
    String::AsciiValue _devId(arg->Get(String::NewSymbol("DevId"))->ToString());
    int32_t _dataCode = arg->Get(String::NewSymbol("DataCode"))->ToInt32()->Value();
    int ret = ReadDevSingleStateData(*_devId, _dataCode);
    return scope.Close(Int32::New(ret));
}

Handle < Value > Fjsmth::writeDevSingleStateSData(const Arguments &args) {
    HandleScope scope;
    Local < Object > arg = args[0]->ToObject();
    String::AsciiValue _devId(arg->Get(String::NewSymbol("DevId"))->ToString());
    int32_t _dataCode = arg->Get(String::NewSymbol("DataCode"))->ToInt32()->Value();
    String::AsciiValue _dataVal(arg->Get(String::NewSymbol("DataVal"))->ToString());
    int ret = WriteDevSingleStateSData(*_devId, _dataCode, *_dataVal);
    return scope.Close(Int32::New(ret));
}

Handle < Value > Fjsmth::writeDevSingleStateIData(const Arguments &args) {
    HandleScope scope;
    Local < Object > arg = args[0]->ToObject();
    String::AsciiValue _devId(arg->Get(String::NewSymbol("DevId"))->ToString());
    int32_t _dataCode = arg->Get(String::NewSymbol("DataCode"))->ToInt32()->Value();
    int32_t _dataVal = arg->Get(String::NewSymbol("DataVal"))->ToInt32()->Value();
    int ret = WriteDevSingleStateIData(*_devId, _dataCode, _dataVal);
    return scope.Close(Int32::New(ret));
}